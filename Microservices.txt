				Microservices
.............................................................................................

Distributed Enterprise application:
   The application developed, tested, deployed on server , distributed over network (internet)

Patterns(ways) for building Distributed Enterprise application:

Before 2010  -Monolithic Enterprise app
After 2010  - Microservices Enterprise app

Enterprise - domain - Banking

Banking:
  Modules
   1.Account Management - Service (mini application)
   2.Customer Management
   3.Loans Management


Microservice is way of building app testing, deploying, maintaining, independently.

Objective:
   Automation. -  Dev Ops and Cloud
   CI AND CD

Deployment:
   Moving app on to the data center.

Data center:
  Servers + os(Linux)----> bare deployment...
  VM -oracle vm
  Lightweight vm - Containers - Docker

Cloud Computing:
   Renting data centers


Application(software system) Development patterns:
.................................................

Network based Applications - Distributed Application

Application has layers:

1.User interface layer
2.Application biz layer
3.Data Layer /Repository layer

Histrory of Architecture of Distributed Application

Distributed means, application is broken into multiple parts and each part put into multiple hosts/machines, connect those via network.

1.Mainframework based distributed
   1.Application biz layer
   2.Data Layer /Repository layer
 Where as User interface layer is kept in dump terminals connected to mainframworks.

Drawbacks:
1.Too costly
2.scalability is too difficult.


Advantage:
1.High security
2.Centeralized management.

2.Client Server Architecture

2.1.Main framework based client -server , where as mainframe acts as server and digital computers act as clients.
 
2.2.Digital computer based client - server architechture
   Servers and clients are digital computers

Based on this we can classify the applications  layered /tiered concept


1.single tier/layer
   client,server,database every is kept in one single machine...
2.two tier/layer
  user interface is kept in client machine,
  data logic and biz logic is kept in server machine
 both machines are connected via networks

          "This arch based on LAN /WAN"

3.three tier /layer

 This arch based on "internet network" and web computing

   client - client machine
   server - biz logic is kept inside another machine
   database - is kept inside another machine

 Client is browser
 Server BIZ logic is kept as "web Applications"
 Database is accessed by "Server side technologies - J2EE,ASP/.net,PHP,....

4.N-tier / layer

 Client is browser
 Server BIZ logic is kept as "web Applications"
   -Again spilt into multi layered
 Database is accessed by "Server side technologies - J2EE,ASP/.net,PHP,....
 In 2000 , J2EE introduced n-tier client server  

  browser -------web application(servlets/jsp)----EJB----Messaging/Databases(JMS/JDBC/Middlewares)

 Spring based N-tier client server arch:

  browser -------web application(spring mvc)---Spring services----Spring data----Messaging/Databases(JMS/JDBC/Middlewares)
.....................................................................................
		    How to build N-tier distributed Applications
.....................................................................................

Steps/Process:

1.Domain Modeling

  Banking, Online Food Delivery App, Ecommerce Domain

2.Select technology

   if your app is based on web and internet.
  Steps:
   1. Database -  Oracle 
   2. MOM - RabbitMQ,IBM MQ,Microsoft MQ
   3. Development Technology
       Java/JEE  - Why you go with specific implmentation technologies?
       .Net
       Php

3.Development and release methodology
   Waterfall -  traditional dev , release


Any domain consist of various modules
 -Accounts
 -Loans
 -Customers
 -Card
etc.....
 
4.Testing
   Once the development is over, the app is going to be under testing

5.Production
   Once the app is tested fully, ready for production.

6.Maintance
   Once the app in the production, it goes on maintaince...

if any app is built based on the above methodology, which is called as "Monolithic"
.....................................................................................
 Challanges in the application development,testing,relase,Production,maintaince
....................................................................................


1.Every thing has to go step by step -  this increase cost , time waste,resource waste

Companies like Amazon,Netflix who wanted fast development,test,release,maintaince : Dynamic  methodology to build applications -  No downtime,
One module takes more time ,another module takes less time, because of one module , other module should not wait.

2.Technology bottleneck - Mono technology
 
 The whole application is built using single technology - Java - vendor lock
 The whole application targets single database - Oracle /Mysql/Microsoft SQL server..

3.Employing security layer is more complicated

4.Deployment / Production.

   The dev and prod env is completly different
   Bare deployment models
   VM based deployment...

...................................................................................
			  New way of building apps


1.Automatation is key concept 

   to anays,dev,test,release,prod,maintaince

Agile :(Requirement Analysis)

  Agile is an iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches. Instead of betting everything on a "big bang" launch, an agile team delivers work in small, but consumable, increments

Breaks the application into smaller and smaller.
 - fast delivery with quality on time.


Requirments are highly dynamic, cant be freezed,since it is dynamic start development,test,release,deploy peridically.


We need automation, through which  automatically only we can achive fast delivery -
 in order to automate, a new technology was created "Dev Ops" - Dev + Operations togther.

Distributed source code repo - git

Pipe lines tools  - 
   Jenkins -(Continuous Integration)

Requirement---> Dev---push the code to source code repo---|CI Tool---Compile--Build/pack--Testing-Deployment(CD)

Every thing is here Continuous happens

Continuous Req Analysis
Continuous Dev 
Continuous release /build
Continuous test
Continuous release /build
Continuous deployment
Continuous tracing and monitoring

This process applied on every module in the applications
OrderManagement 
   Continuous Req Analysis,Dev,release,test,deployment,tracing,monitoring

CustomerManagement 
   Continuous Req Analysis,Dev,release,test,deployment,tracing,monitoring


if any app is built based on the above methodology, that application is called as 				  "MicroService"
....................................................................................

What is Microservice?
  Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of two or more services that are:
1.Independently deployable
2.Loosely coupled

Services are typically organized around business capabilities. Each service is often owned by a single, small team.

A Service is a "mini application" that implmements narrowly focused functionality.
Such as orderManagement,customer Management, and so on....

....................................................................................
			How to design and implment microservices

The microservices is all about practices followed,implemented, and tested in real time production grade applications in various companies like amazon,netflix,google,microsoft.

The many community people joined  togther who formed the pattern language in order to begin development of Microservices - Microservice pattern language, design patterns

if i want to build microservice based apps, how to begin , where to begin.

			Microservices design patterns
.....................................................................................
....................................................................................
		   Microservice arichitecture pattern language
...................................................................................  
The Microservice pattern language is a collection of patterns that help you architect an application using the microservice architectures.

Infrastructure Patterns:
  Thses solves problems that are mostly infrastructure issues outside of development.

Application patterns:
  These are for related to development

Application Infrastructure:
   Application related infrastructures like containers
....................................................................................
	     Patterns for Decomposing an Application into services	


1.Decompose by business capability 
	 |
	 |
2.Decompose by subdomain

3.SelfContained Service

4.Service Per Team
.....................................................................................
			    Design patterns in Microservices
....................................................................................

Application Architecture Pattern
   For building n-tier client server distributed application.

-Monolithic architecture
-Microservice architecture

Decomposition Pattern -Y scalling

1.Decompose by business capability 	 
2.Decompose by subdomain
3.SelfContained Service
4.Service Per Team


MicroService Architecture Pattern------>Depcompostion Pattern

Decompose by business capability 

If you are going to build online store.

Business capability:
Product Catalog Management
Inventory Management
Order Management
Delivery Management.

Alternate Pattern

Decompose by SubDomain:
 Decompose the problem based on DDD principles.

....................................................................................
....................................................................................
				Data Management
....................................................................................

Core Pattern:
1.Database Per Service Pattern
2.Shared Database

Note:
  if you take any data related patterns, "Transactions" are very important.


1.Database Per Service Pattern leads/succeeds other patterns
  Domain Event
  Event Sourcing 
  Saga - Transaction
  CQRS
  API Composition
 
..................................................................................
	    Advance Data Management Pattern -Transactional Messaging Pattern   
..................................................................................

1.Transactional outbox
    2.Transactional log tailing
     or
    3.Polling publisher

   2.1.Idemponent Consumer
.....................................................................................
.....................................................................................
			Communication Style Patterns
...................................................................................

Service = Mini Application

MiniApplication = Collection of Programs

Collection of programs in Java = Collections of classes

Collections of classes = Collections Objects.

Object/Class = Collection of  state and behaviour

State = data
Behaviour=methods

Object = methods

methods = API

API will DO three things

1.write - update,remove,insert
2.read
3.process

class OrderService {

   @Autowrited
   private OrderRepository orderRepo;
   //API
   public List<Order> findAll(){
	orderRepo.findAll()
   }
 
}

Types of API:
1.local api
   api which are called with in same runtime by other apis
2.remote api
  api which are called outside runtime via networks 

How to build remote api?

 Based on protocals

1.HTTP Protocal.

 if you design your api based on HTTP protcal, those apis are called as "WebServices"

Web Service:
  RESTFull WebServices,SOAP WebServices

REST API = Program

In java => classes

In Web Services classes are called "End Points"

In Micro services -Services can be  represented as "WebServices"

Rest WebService------>http-----RestWebservice => HTTP based Microservice

Rest WebService------>http-----Graphql => HTTP based Microservice

Rest WebService------>http/2 over tcp------GRpc Service=> TCP based Microservice

Rest Web Service ---->TCP/MOM-------------->Messaging Service -Middlewares

Communication Sytle patterns:

1.RPI patterns
   REST,gRPC,Apache Thrift - RPI implementations
2.Messaging
   Any Messaging middlewares - RabbitMQ,IBM MQ,MicroSoft MQ - MQTT,AMQP
   Streaming platforms - Apache Kafka,Confluent Kafka
   2.1.Idemponent Consumer
3.Domain Specfic Protocal
   SMTP - Mail Service   

.....................................................................................
			   Deployment Patterns
.....................................................................................

Once the services(applications) are ready, we can move the application into production.

Production Related Patterns:

Deployment Environment/Plattforms

1.Bare Metal 
    Where as physical hardware, and operating system, Where we can provision our application.
    If you deploy java application.

  OS: Linux
  JRE- 17
  WebContainer -Tomcat
  Databases -MySql
  Streaming Platforms-Kafka
   
2.Virutal Machine 
   Oracle Virtual box 
    on VM , you can install os-linux
  JRE- 17
   WebContainer -Tomcat
   Databases -MySql
   Streaming Platforms-Kafka

3.Containerized Deployment
    It is lightweight vm - Docker and Kubernets
   JRE- 17
   WebContainer -Tomcat
   Databases -MySql
   Streaming Platforms-Kafka
  
4.Cloud 
   ->VM /container/bare 
  you can just deploy your app only,
  cloud may give you all softwares for you...


  "Cloud with containers are most preferable deployment for microservices"

Design patterns:

Bare Metal:
 1.Multiple services instances per host
 2.Service instance per host
VM
 1.Service instance Per VM
Container
 1.Service instance per Container
Cloud
 1.server less deployment
 2.Service deployment platform
 3.container and cloud

			      
		if your app deployement is in container 
				  or 
    			       in cloud
				  or 
			   Container with cloud
				 or 
			   in any Virtualized Env

if any micro service(application) is running in containerized env like kubernets(docker).

Challanges:
 1.suppose the application is accessed by other application or external application
   we need to communicate the application with help of "host:port".
 if application is running Virtualized env, "host and port" is not static,it would be dynamic.

 if it is dynamic then how other microservices, and external application, how they can communicate.
			
To solve the problem of identifying the services which are running in Virtualized env

Advanced Communication Patterns
				(Service Registry and Discovery)


When we apply this pattern, services never communicate "directly", because they dont know each other due to "dynamic location",so they use broker to communicate, broker will have all service information-Service Registry

Service Registry Patterns:

1.Client side service Discovery
2.Server-side service Discovery
   ->Service Registry
  	->Self Registration
   	->ThridParty Registration

.....................................................................................
.....................................................................................
                     Services are running in Virtualized Env
		     Services are talking via Service Registry
		What if i any service is down / Slow / Throwing Exception
					
Microservices provides a Design patterns to handle failures and slow calls

			 Service Reliablity Patterns

1.Timeout Pattern
2.Bulk Head Pattern
3.Retry Pattern
4.Circuit Breaker Patterns
.....................................................................................
.....................................................................................
			    Configuration Data and Its patterns

Every application which requires configuration data,the configuration data may be connection strings,api tokens,application settings etc...

In Java application, configuration data is kept inside properties or yml files...

What if in micro serivces, the configuration is need to be shared across the application?

We have design pattern to centeralize configuration data/information.

1.Microservice Chassis
2.Service Templates
3.Externalized COnfiguration

.....................................................................................
		     Micro services are ready in production
		We have exposed our microservices via API Gateways
			  How to secure them?

Security Patterns

1.Access Tokens
   -Authentecation
   -Authrozation
   -SSL
   -Policies

.....................................................................................
		   Micro services are ready in production
			Now we need to expose to
		 other Applications- User interface applications

Microservices provide you a design pattern, called

External API patterns:

1.API Gate ways
  2.Back End for FrontEnd

.....................................................................................

.....................................................................................
....................................................................................
			Now your Micro service is in Production
				Next what should i do
			     Your App in Maintaince 

Monitor Your apps......

Observablity Design patterns:

1.Log Management/Aggregation Pattern
2.Application Metrics Pattern
3.Audit Logging pattern
4.Distributed Tracing
5.Exception Tracker Pattern
6.Health Check API pattern
................................................................................

..............................................................................................
How to build Microservices?
  There are plenty of  Patterns available 

How to implement these patterns and where to implement?

 All programming languages support microservices via frameworks and libs

Microservices implementation:

Java frameworks:
 1.Spring boot with Spring cloud
 2.Quarkus
 3.Vertx
 etc.....

JavaScript:
 1.node.js with "Molculer.js"
 2.node.js with "nest.js"
 3.nodejs with "loopback.js"
 etc.....

.....................................................................................
				Moleculer
.....................................................................................

What is Moleculer?

Moleculer is node.js framework for building microservices application.
Moleculer implements most of the design patterns of microservices.

Features of Moleculer:

1.Promise-based solution (async/await compatible)
2.request-reply concept
3.support event driven architecture with load balancing
4.built-in service registry & dynamic service discovery
5.load balanced requests & events (round-robin, random, cpu-usage, latency, sharding)
6.many fault tolerance features (Circuit Breaker, Bulkhead, Retry, Timeout, Fallback)
plugin/middleware system
7.support versioned services
8.support Streams
9.service mixins
10.built-in caching solution (Memory, MemoryLRU, Redis)
11.pluggable loggers (Console, File, Pino, Bunyan, Winston, Debug, Datadog, Log4js)
12.pluggable transporters (TCP, NATS, MQTT, Redis, NATS Streaming, Kafka, AMQP 0.9, AMQP 1.0)
13.pluggable serializers (JSON, Avro, MsgPack, Protocol Buffer, Thrift)
14.pluggable parameter validator
15.multiple services on a node/server
16.master-less architecture, all nodes are equal
17.parameter validation with fastest-validator
18.built-in metrics feature with reporters (Console, CSV, Datadog, Event, Prometheus, StatsD)
19.built-in tracing feature with exporters (Console, Datadog, Event, Jaeger, Zipkin)
20.official API gateway, Database access and many other modules…

....................................**********************..................................
....................................................................................
				
core concepts:

1.Service
 A service is a simple JavaScript module containing some part of a complex application. 
 A service represents a biz logic in your application.


2.Service Broker : == Spring Container

 Service Broker is the heart of Moleculer.

It is responsible for management and communication between services (local and remote). 


3.node :
 A node is a simple OS process running on a local or external network.
 A single instance of a node can host one or many services.
 node js platform - v8+libvu..

Each node must have an instance of Service Broker.
 "Service Broker is one single Node instance - Node runtime"


4.Transporter
	Transporter is a communication bus that services use to exchange messages. 
 It transfers events, requests and responses.

5.Gateway
     API Gateway exposes Moleculer services to end-users.
 The gateway is a regular Moleculer service running a (HTTP, WebSockets, etc.) server. It handles the incoming requests, maps them into service calls, and then returns appropriate responses.

.........................................................................................................................................................................

.....................................................................................
			Coding -Getting started


Service Types:

1.Back end services - It is not exposed as "REST" API
2.Front end Services  -It is rest apis.


Project setup :

1.using tool Moleculer cli tool
2.without using any tool.

Project creation:
.................
 just simple node project.

G:\IBM\2024\Oct\NodeJs\microservices>mkdir basicapp

G:\IBM\2024\Oct\NodeJs\microservices>cd basicapp

G:\IBM\2024\Oct\NodeJs\microservices\basicapp>

:\IBM\2024\Oct\NodeJs\microservices\basicapp>npm init --yes
Wr

G:\IBM\2024\Oct\NodeJs\microservices\basicapp>mkdir services


HelloWorld:

const { ServiceBroker } = require('moleculer')

//create Broker(Container) instance
const broker = new ServiceBroker()

//create Service
broker.createService({
    name: 'hello',
    //biz logic 
    actions: {
        //biz logic
        sayHello() {
            return 'Hello'
        }
    }
})

//main function
async function main() {
    //start the broker : broker is not web server, just runtime.
    try {
        await broker.start()
        //invoke service methods
        const result = await broker.call('hello.sayHello')
        console.log(result)
    }
    catch (err) {
        console.log(err)
    }
}
main()

Multi Methods:
const { ServiceBroker } = require('moleculer')

//create Broker(Container) instance
const broker = new ServiceBroker()

//create Service
broker.createService({
    name: 'greet',
    //biz logic 
    actions: {
        //biz logic
        sayHello() {
            return 'Hello'
        },
        sayHai() {
            return 'Hai'
        },
        sayGreet() {
            return 'Greet'
        }
    }
})

//main function
async function main() {
    //start the broker : broker is not web server, just runtime.
    try {
        await broker.start()
        //invoke service methods
        const hello = await broker.call('greet.sayHello')
        const hai = await broker.call('greet.sayHai')
        const greet = await broker.call('greet.sayGreet')
        console.log(hello,hai,greet)
    }
    catch (err) {
        console.log(err)
    }
}
main()

Multi services:
const { ServiceBroker } = require('moleculer')

//create Broker(Container) instance
const broker = new ServiceBroker()

//create Service
broker.createService({
    name: 'greet',
    //biz logic 
    actions: {
        //biz logic
        sayHello() {
            return 'Hello'
        },
        sayHai() {
            return 'Hai'
        },
        sayGreet() {
            return 'Greet'
        }
    }
})

broker.createService({
    name: 'math',
    actions: {
        add() {
            return 10 + 10
        },
        multiply() {
            return 10 * 10
        }
    }
})

//main function
async function main() {
    //start the broker : broker is not web server, just runtime.
    try {
        await broker.start()
        //invoke service methods
        const hello = await broker.call('greet.sayHello')
        const hai = await broker.call('greet.sayHai')
        const greet = await broker.call('greet.sayGreet')

        const add = await broker.call('math.add')
        const multiply= await broker.call('math.multiply')
        console.log(hello, hai, greet)

        console.log(`Add ${add} Multiply ${multiply}`)
    }
    catch (err) {
        console.log(err)
    }
}
main()

.....................................................................................
			    Service api parameters
....................................................................................

How to pass params to Service methods? How to read args from the service Method?

Parameters are stored inside special object called "Context"

Context Object:

1.Similar to Broker Object
2.It has all capacity of Broker object
3.Context object is used inside service definitions , where ever you require broker
  Object reference.

context object already created, and its reference is available inside "Service method" as args.

Reading parameters

1.context.params 
  params are literal object what ever parameter we pass, it will be inside ctx

context.params.variable




//start:
const { ServiceBroker } = require('moleculer')

//create service Broker instance
const broker = new ServiceBroker()

//create service: which represents biz logic
broker.createService({
    name: "hello",
    actions: {
        //here we write biz logic
        sayHello(ctx) {
            console.log(ctx.params)
            return `Hello ${ctx.params.name}`
        },
    }
})
broker.createService({
    name: "math",
    actions: {
        //here we write biz logic
        add(ctx) {
            const { a, b } = ctx.params
            const res = a + b 
            return `Result = ${res}`
        },
    }
})



async function main() {
    try {
        //start service broker: start webserver
        await broker.start()
        //invoke service methods
        const hello = await broker.call('hello.sayHello', { name: 'Subramanian' })
        console.log(hello)
        const result = await broker.call('math.add', { a: 10, b: 20 })
        console.log(result)

    }
    catch (err) {
        console.log(err)
    }
}
main()


....................................................................................
			  Input param validation and action syntax
....................................................................................

Actions are written using two syntax

Syntax : 1

broker.createService({
    name: "math",
    actions: {
       add(ctx) {
            const { a, b } = ctx.params
            const res = a + b 
            return `Result = ${res}`
        },
    }
})

Syntax : 2:


broker.createService({
    name: "math",
    actions: {
      add: {
         //method meta information
        handler(ctx){
          //biz logic
       }   
      }
    }
})



const { ServiceBroker } = require('moleculer')

//create Broker(Container) instance
const broker = new ServiceBroker()

broker.createService({
    name: 'math',
    actions: {
        //syntax 1: 
        add(ctx) {
            const { a, b } = ctx.params
            return a + b
        },
        //syntax 2:
        multiply: {
            //extra configuration for this method
            //validation rules for input params
            // params: {
            //     a: "number",
            //     b: "number"
            // },
            params: {
                a: {
                    type: 'number',
                    positive: true,
                    integer: true
                }
            },
            handler(ctx) {
                const { a, b } = ctx.params
                return a * b
            }
        }
    }
})

//main function
async function main() {
    //start the broker : broker is not web server, just runtime.
    try {
        await broker.start()
        const add = await broker.call('math.add', { a: 10, b: 20 })
        const multiply = await broker.call('math.multiply', { a: 10, b: 30 })
        console.log(`Add ${add} Multiply ${multiply}`)
    }
    catch (err) {
        console.log(err)
    }
}
main()
For More advanced validation rules for all types of variables in js.
https://github.com/icebob/fastest-validator

***********************************************************----------------********************************************************
.....................................................................................
		  Dynamic params and Dynamic invocation services
.....................................................................................

Moleculer has a tool called "Moleculer REPL"

>npm install moleculer-repl --save-dev


const { ServiceBroker } = require('moleculer')
const broker = new ServiceBroker()

broker.createService({
    name: "math",
    actions: {
        add: {
            //meta information
            params: {
                a: { type: "number", positive: true, integer: true, default: 0 },
                b: { type: "number", positive: true, integer: true, default: 0 }
            },
            handler(ctx) {
                const { a, b } = ctx.params
                return a + b
            }
        }
    }
})

async function main() {
    try {
        await broker.start()
        //will start interactive commandline tool
        broker.repl()
    }
    catch (err) {
        console.log(err)
    }
}
main()

Testing:
mol $ call math.add --a 45 --b 30
>> Call 'math.add' with params: { a: 45, b: 30 } with meta: { '$repl': true }
>> Execution time:550μs
>> Response:
75
.....................................................................................
			     Service Communication
.....................................................................................

Service Representation:

1.RPI
  -REST,Graphql
  -Grpc
  -Thirft
  -TCP
2.Messaging 
  -RabbitMQ
  -Kafka
   

RPI
 Rest to Rest Communication
 Rest to TCP/non Rest communication.


Moleculr supports all types of communications

1.NonRest to NonRest Communication - BackEndService to BackEndService

Moleculer is microservice, generally microservices may be distributed across multiple machines(nodes) , which communicates via networks.
.......................

1.Service communication with in single broker - local services

2.Service communication across multiple service brokers -remote services


Communication style

1. can be sync
2. can be async

Types of services:

1.local service
   service which is implemented on single broker.
2.remote service
   Service which is implemented across the brokers.
 
Services can communicate within service broker-single node arch
Services can communicate across service brokers - multi node arch

How services are interacting each other?

 Using "Context" Object


Actors:

 1.Caller service, who is calling /consuming other services

 2.Callee service, who is called by others

....................................................................................

Use case: RPC TO RPC , within single Broker(Single Node)
........................................................
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker()


//service 1
broker.createService({
    name: 'math',
    actions: {
        add(ctx) {
            return ctx.params.a + ctx.params.b
        }
    }
})

//service 2
broker.createService({
    name: 'calculator',
    actions: {
        add(ctx) {
            //need to call math
            const { a, b } = ctx.params
            return ctx.call('math.add', { a, b })
        }
    }
})


async function main() {
    try {
        //start the broker 
        await broker.start()
        //use repl prompt
        broker.repl()

    } catch (err) {
        console.log(err)
    }
}
main()
...................................................................................
			 How brokers can talk each other?
...................................................................................

Networking:
..........
in order to communicate with other nodes(servicebrokers) you need to configure a "Transporter"

Transporter:
 It is a bus which transports, calls,messages,events....

Transporter connected via a centeral Message broker that provides a reliable way of exchanging messages among remote nodes.


-Transporter is an important module if you are running services on multiple nodes. 

-Transporter communicates with other nodes. 

-It transfers events, calls requests and processes responses …etc. 

-If a service runs on multiple instances on different nodes, the requests will be load-balanced among live nodes.

Transports:
............
Built-in transporter

TCP transporter - part of moleculer

Third party Message Brokers
  NATS Transporter
  Redis Transporter
  MQTT Transporter
  AMQP Transporter
  Kafka Transporter
  NATS Streaming (STAN) Transporter
  Custom Transporter

TCP transporter:

This is a no-dependency, zero-configuration TCP transporter.
It uses Gossip protocol to disseminate node statuses, service list and heartbeats.
It contains an integrated UDP discovery feature to detect new and disconnected nodes on the network.
If the UDP is prohibited on your network, use urls option. It is a list of remote endpoints (host/ip, port, nodeID). It can be a static list in your configuration or a file path which contains the list.

Use case :How to use TCP transport as channel for service Communications.

We need to configure Service Broker to enable transporter.

ServiceBroker object creation:

const broker = new ServiceBroker();
 Here we have not passed any parameter to ServiceBroker Constructor, if you dont, the default parameters will be passed.

Service Broker Parameters are called as "ServiceBroker Schema"

We can override service Broker Schema to enable broker vide features.




Use case :How to use TCP transport as channel for service Communications.

We need to configure Service Broker to enable transporter.

ServiceBroker object creation:

const broker = new ServiceBroker();
 Here we have not passed any parameter to ServiceBroker Constructor, if you dont, the default parameters will be passed.

Service Broker Parameters are called as "ServiceBroker Schema"

We can override service Broker Schema to enable broker vide features.

const { ServiceBroker } = require('moleculer')
const broker = new ServiceBroker({
    transporter:"TCP"
});

eg:
App1
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    transporter:"TCP"
})

broker.createService({
    name: 'math',
    actions: {
        add: {
            //param validation logic
            params: {
                a: "number",
                b: "number"
            },
            //biz logic 
            handler(ctx) {
                const a = ctx.params.a
                const b = ctx.params.b
                //service to service communication via context object 
                return ctx.call('adder.add', { a: a, b: b })
            }
        },
        multiply: {
            //param validation logic
            params: {
                a: "number",
                b: "number"
            },
            //biz logic 
            handler(ctx) {
                const a = ctx.params.a
                const b = ctx.params.b
                //service to service communication via context object 
                return ctx.call('multiplier.multiply', { a: a, b: b })
            }
        },
    }
})

broker.createService({
    name: 'adder',
    actions: {
        add: {
            //param validation logic
            params: {
                a: "number",
                b: "number"
            },
            //biz logic 
            handler(ctx) {
                const a = ctx.params.a
                const b = ctx.params.b
                return a + b
            }
        }
    }
})


async function main() {
    try {
        //start the broker 
        await broker.start()
        //use repl prompt
        broker.repl()

    } catch (err) {
        console.log(err)
    }
}
main()

App2
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    transporter: "TCP"
})

broker.createService({
    name: 'multiplier',
    actions: {
        multiply: {
            //param validation logic
            params: {
                a: "number",
                b: "number"
            },
            //biz logic 
            handler(ctx) {
                const a = ctx.params.a
                const b = ctx.params.b
                return a * b
            }
        }
    }
})



async function main() {
    try {
        //start the broker 
        await broker.start()
        //use repl prompt
        broker.repl()

    } catch (err) {
        console.log(err)
    }
}
main()

Testing

Node1
node services/math.service.js
[2022-11-10T05:20:16.175Z] INFO  laptop-r2tggfdl-82848/BROKER: Moleculer v0.14.26 is starting...
[2022-11-10T05:20:16.177Z] INFO  laptop-r2tggfdl-82848/BROKER: Namespace: <not defined>
[2022-11-10T05:20:16.177Z] INFO  laptop-r2tggfdl-82848/BROKER: Node ID: laptop-r2tggfdl-82848
[2022-11-10T05:20:16.179Z] INFO  laptop-r2tggfdl-82848/REGISTRY: Strategy: RoundRobinStrategy
[2022-11-10T05:20:16.179Z] INFO  laptop-r2tggfdl-82848/REGISTRY: Discoverer: LocalDiscoverer
[2022-11-10T05:20:16.186Z] INFO  laptop-r2tggfdl-82848/BROKER: Serializer: JSONSerializer
[2022-11-10T05:20:16.198Z] INFO  laptop-r2tggfdl-82848/BROKER: Validator: FastestValidator
[2022-11-10T05:20:16.200Z] INFO  laptop-r2tggfdl-82848/BROKER: Registered 13 middleware(s).
[2022-11-10T05:20:16.202Z] INFO  laptop-r2tggfdl-82848/BROKER: Transporter: TcpTransporter
[2022-11-10T05:20:16.215Z] INFO  laptop-r2tggfdl-82848/TRANSIT: Connecting to the transporter...
[2022-11-10T05:20:16.218Z] INFO  laptop-r2tggfdl-82848/TRANSPORTER: TCP server is listening on port 51606
[2022-11-10T05:20:16.229Z] INFO  laptop-r2tggfdl-82848/TRANSPORTER: UDP Multicast Server is listening on 172.21.112.1:4445. Membership: 239.0.0.0
[2022-11-10T05:20:16.230Z] INFO  laptop-r2tggfdl-82848/TRANSPORTER: UDP Multicast Server is listening on 172.17.64.1:4445. Membership: 239.0.0.0
[2022-11-10T05:20:16.231Z] INFO  laptop-r2tggfdl-82848/TRANSPORTER: UDP Multicast Server is listening on 192.168.1.8:4445. Membership: 239.0.0.0
[2022-11-10T05:20:16.232Z] INFO  laptop-r2tggfdl-82848/TRANSPORTER: UDP Multicast Server is listening on 127.0.0.1:4445. Membership: 239.0.0.0
[2022-11-10T05:20:16.233Z] INFO  laptop-r2tggfdl-82848/TRANSPORTER: UDP discovery started.
[2022-11-10T05:20:16.233Z] INFO  laptop-r2tggfdl-82848/TRANSPORTER: TCP Transporter started.
[2022-11-10T05:20:16.739Z] INFO  laptop-r2tggfdl-82848/REGISTRY: '$node' service is registered.
[2022-11-10T05:20:16.741Z] INFO  laptop-r2tggfdl-82848/REGISTRY: 'math' service is registered.
[2022-11-10T05:20:16.743Z] INFO  laptop-r2tggfdl-82848/REGISTRY: 'adder' service is registered.
[2022-11-10T05:20:16.743Z] INFO  laptop-r2tggfdl-82848/$NODE: Service '$node' started.
[2022-11-10T05:20:16.744Z] INFO  laptop-r2tggfdl-82848/MATH: Service 'math' started.
[2022-11-10T05:20:16.745Z] INFO  laptop-r2tggfdl-82848/ADDER: Service 'adder' started.
[2022-11-10T05:20:16.745Z] INFO  laptop-r2tggfdl-82848/BROKER: ✔ ServiceBroker with 3 service(s) started successfully in 530ms.
mol $ [2022-11-10T05:20:52.460Z] INFO  laptop-r2tggfdl-82848/REGISTRY: Node 'laptop-r2tggfdl-53460' reconnected.
mol $ nodes
╔═══════════════════════════╤══════════╤═════════╤════════╤════════════════════╤══════════╤════════════════════════════╗
║ Node ID                   │ Services │ Version │ Client │ IP                 │    State │ CPU                        ║
╟───────────────────────────┼──────────┼─────────┼────────┼────────────────────┼──────────┼────────────────────────────╢
║ laptop-r2tggfdl-53460     │ 2        │ 0.14.26 │ nodejs │ 172.21.112.1  (+2) │  ONLINE  │ [■■■.................] 14% ║
║ laptop-r2tggfdl-82848 (*) │ 3        │ 0.14.26 │ nodejs │ 172.21.112.1  (+2) │  ONLINE  │ [■...................] 4%  ║
╚═══════════════════════════╧══════════╧═════════╧════════╧════════════════════╧══════════╧════════════════════════════╝
..............................

Node 2:
node services/multiplier.service.js
[2022-11-10T05:20:49.701Z] INFO  laptop-r2tggfdl-53460/BROKER: Moleculer v0.14.26 is starting...
[2022-11-10T05:20:49.702Z] INFO  laptop-r2tggfdl-53460/BROKER: Namespace: <not defined>
[2022-11-10T05:20:49.703Z] INFO  laptop-r2tggfdl-53460/BROKER: Node ID: laptop-r2tggfdl-53460
[2022-11-10T05:20:49.704Z] INFO  laptop-r2tggfdl-53460/REGISTRY: Strategy: RoundRobinStrategy
[2022-11-10T05:20:49.705Z] INFO  laptop-r2tggfdl-53460/REGISTRY: Discoverer: LocalDiscoverer
[2022-11-10T05:20:49.711Z] INFO  laptop-r2tggfdl-53460/BROKER: Serializer: JSONSerializer
[2022-11-10T05:20:49.721Z] INFO  laptop-r2tggfdl-53460/BROKER: Validator: FastestValidator
[2022-11-10T05:20:49.723Z] INFO  laptop-r2tggfdl-53460/BROKER: Registered 13 middleware(s).
[2022-11-10T05:20:49.725Z] INFO  laptop-r2tggfdl-53460/BROKER: Transporter: TcpTransporter
[2022-11-10T05:20:49.736Z] INFO  laptop-r2tggfdl-53460/TRANSIT: Connecting to the transporter...
[2022-11-10T05:20:49.739Z] INFO  laptop-r2tggfdl-53460/TRANSPORTER: TCP server is listening on port 51607
[2022-11-10T05:20:49.756Z] INFO  laptop-r2tggfdl-53460/TRANSPORTER: UDP Multicast Server is listening on 172.21.112.1:4445. Membership: 239.0.0.0
[2022-11-10T05:20:49.757Z] INFO  laptop-r2tggfdl-53460/TRANSPORTER: UDP Multicast Server is listening on 172.17.64.1:4445. Membership: 239.0.0.0
[2022-11-10T05:20:49.760Z] INFO  laptop-r2tggfdl-53460/TRANSPORTER: UDP Multicast Server is listening on 192.168.1.8:4445. Membership: 239.0.0.0
[2022-11-10T05:20:49.761Z] INFO  laptop-r2tggfdl-53460/TRANSPORTER: UDP Multicast Server is listening on 127.0.0.1:4445. Membership: 239.0.0.0
[2022-11-10T05:20:49.764Z] INFO  laptop-r2tggfdl-53460/TRANSPORTER: UDP discovery started.
[2022-11-10T05:20:49.766Z] INFO  laptop-r2tggfdl-53460/TRANSPORTER: TCP Transporter started.
[2022-11-10T05:20:50.289Z] INFO  laptop-r2tggfdl-53460/REGISTRY: '$node' service is registered.
[2022-11-10T05:20:50.290Z] INFO  laptop-r2tggfdl-53460/REGISTRY: 'multiplier' service is registered.
[2022-11-10T05:20:50.293Z] INFO  laptop-r2tggfdl-53460/$NODE: Service '$node' started.
[2022-11-10T05:20:50.299Z] INFO  laptop-r2tggfdl-53460/MULTIPLIER: Service 'multiplier' started.
[2022-11-10T05:20:50.301Z] INFO  laptop-r2tggfdl-53460/BROKER: ✔ ServiceBroker with 2 service(s) started successfully in 564ms.
mol $ [2022-11-10T05:20:53.977Z] INFO  laptop-r2tggfdl-53460/REGISTRY: Node 'laptop-r2tggfdl-82848' reconnected.

mol $ nodes
╔═══════════════════════════╤══════════╤═════════╤════════╤════════════════════╤══════════╤════════════════════════════╗
║ Node ID                   │ Services │ Version │ Client │ IP                 │    State │ CPU                        ║
╟───────────────────────────┼──────────┼─────────┼────────┼────────────────────┼──────────┼────────────────────────────╢
║ laptop-r2tggfdl-53460 (*) │ 2        │ 0.14.26 │ nodejs │ 172.21.112.1  (+2) │  ONLINE  │ [■■■.................] 15% ║
║ laptop-r2tggfdl-82848     │ 3        │ 0.14.26 │ nodejs │ 172.21.112.1  (+2) │  ONLINE  │ [■■..................] 11% ║
╚═══════════════════════════╧══════════╧═════════╧════════╧════════════════════╧══════════╧════════════════════════════╝

mol $

.............................................................................................
			  How to use other Message Brokers
.....................................................................................

Steps:
1.You need a message broker software -  redis,nats,rabbitmq...

docker run  --name nats-main -p 4222:4222 -p 6222:6222 -p 8222:8222 nats


2.you need to install driver for connecting third message broker.
 
incase of nat
 npm install nats --save

3.configure in the service broker

const broker = new ServiceBroker({
    transporter:"nats://localhost:4222"
})
...................................................................................
			Service Life cycle methods
....................................................................................

const { ServiceBroker } = require('moleculer')
const broker = new ServiceBroker()

broker.createService({
    name: "math",
    actions: {
        add: {
            //meta information
            params: {
                a: { type: "number", positive: true, integer: true, default: 0 },
                b: { type: "number", positive: true, integer: true, default: 0 }
            },
            handler(ctx) {
                const { a, b } = ctx.params
                return this.add(a, b)
            }
        }
    },
    methods: {
        add(a, b) {
            return a + b
        }
    },
    //life cycle methods
    created() {
        console.log('service is created')
    },
    merged() {
        console.log('service is merged')
    },
    async started() {
        console.log('service is started ')
    },
    async stoped() {
        console.log('service is stopped')
    }
})

async function main() {
    try {
        await broker.start()
        //will start interactive commandline tool
        broker.repl()
    }
    catch (err) {
        console.log(err)
    }
}
main()
....................................................................................
			Broker life cycle methods
....................................................................................
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    created(broker) {
        console.log('broker created')
    },
    started(broker) {
        console.log('broker started')
    },

    stopped(broker) {
        console.log('broker is stopped')
    }
})

broker.createService({
    name: "math",
    actions: {
        add: {
            //meta information
            params: {
                a: { type: "number", positive: true, integer: true, default: 0 },
                b: { type: "number", positive: true, integer: true, default: 0 }
            },
            handler(ctx) {
                const { a, b } = ctx.params
                return this.add(a, b)
            }
        }
    },
    methods: {
        add(a, b) {
            return a + b
        }
    },
    //life cycle methods
    created() {
        console.log('service is created')
    },
    merged() {
        console.log('service is merged')
    },
    async started() {
        console.log('service is started ')
    },
    async stoped() {
        console.log('service is stopped')
    }
})

async function main() {
    try {
        await broker.start()
        //will start interactive commandline tool
        broker.repl()
    }
    catch (err) {
        console.log(err)
    }
}
main()
.........................................................................................................................................................................................
				  How to modularize the service information


1.inheritance - service inheritance

A Service has many options, those options may be repeated in many other services,
like common settings.

We can isolate common features / options into a separate service, we can reuse across multiple services -  Inheritance.

How to implement inheritance in Moleculer?

JavaScript can support only single inheritance, only one parent allowed for a child.

Java like languages support interfaces for multi parent patterns, JavaScript has no such facility.

JavaScript has a design pattern and implementation ,called "mixin", through mixin we can inherit many super objects.

Moleculer has mixin property

Use case:
1.if you write any REST Controller.
2.if you write database operations inside your service.
etc...

const { ServiceBroker } = require('moleculer')
const broker = new ServiceBroker();

//parent Services
const hello = {
    name: 'hello',
    actions: {
        sayHello() {
            return 'Hello,From Parent';
        }
    }
}
const hai = {
    name: 'hai',
    actions: {
        sayHai() {
            return 'Hai, From Parent'
        }
    }
}
//Child Service
broker.createService({
    name: 'greeter',
    mixins: [hello, hai]
})

async function main() {
    try {
        await broker.start()
        broker.repl();
    }
    catch (err) {
        console.log(err);
    }

}
main();

mol $ call greeter.sayHai
>> Call 'greeter.sayHai' with params: {} with meta: { '$repl': true }
>> Execution time:4ms
>> Response:
'Hai, From Parent'
mol $ call greeter.sayHello
>> Call 'greeter.sayHello' with params: {} with meta: { '$repl': true }
>> Execution time:1ms
>> Response:
'Hello,From Parent'
..........................................................................................................................................................................................
						How to isolate server definitions outside main service(broker)


1.write service in a separate file
2.write service broker in  separate file

broker definitions can be automated using moleculer-runner dependency which is part of core moleculer dependency

Steps:

1.broker definition

ProjectRootDir/moleculer-runner.config.js

//server broker definition
module.exports = {
    transporter: null
}

2.write service definitions

module.exports = {
    name: 'hello',
    actions: {
        sayHello() {
            return "Hello"
        },
        sayHai() {
            return "Hai"
        }
        
    }
}
3.configuration in package.json file
  "scripts": {
    "start": "moleculer-runner --repl --hot services/app.service.js"
  }

we have added repl prompt and also activated hot reloading feature.


...................................................................................
				Types of Services

Moleculer Provides two types of service

1.Custom Services
   The services are created with broker object
2.Built services
  The services are provided by Broker

$node
   Used for administration

How to list all services using $node

How to list all services using $node

 call $node.services
>> Call '$node.services' with params: {} with meta: { '$repl': true } with options: {}
>> Execution time:1ms
>> Response:
[
  {
    name: '$node',
    version: undefined,
    fullName: '$node',
    settings: {},
    metadata: {},
    local: true,
    available: true,
    nodes: [ 'laptop-r2tggfdl-17828' ]
  },
  {
    name: 'greeter',
    version: undefined,
    fullName: 'greeter',
    settings: { port: 3000, host: 'ibm.com' },
    metadata: {},
    local: true,
    available: true,
    nodes: [ 'laptop-r2tggfdl-17828' ]
  }
]

$ call $node.list
>> Call '$node.list' with params: {} with meta: { '$repl': true } with options: {}
>> Execution time:1ms
>> Response:
[
  {
    id: 'laptop-r2tggfdl-17828',
    instanceID: 'c7fd8078-2bf2-42ee-88f6-1fd20184eb3c',
    available: true,
    local: true,
    lastHeartbeatTime: 0,
    config: {},
    client: { type: 'nodejs', version: '0.14.21', langVersion: 'v16.15.0' },
    metadata: {},
    ipList: [ '172.26.240.1', '172.22.176.1', '192.168.0.105' ],
    port: null,
    hostname: 'LAPTOP-R2TGGFDL',
    udpAddress: null,
    cpu: null,
    cpuSeq: null,
    seq: 3,
    offlineSince: null
  }
]

broker.createService({})


//start:
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker()

broker.createService({
    name: "hello",
    version: 1,
    actions: {
        //here we write biz logic
        sayHello() {
            return 'Hello Old MicroService'
        }
    }
})
broker.createService({
    name: "hello",
    version: 2,
    actions: {
        //here we write biz logic
        sayHello() {
            return 'Hello New MicroService'
        }
    }
})


async function main() {
    try {
        //start service broker: start webserver
        await broker.start()
        broker.repl()

    }
    catch (err) {
        console.log(err)
    }
}
main()

Testing:
>> Call 'v1.hello.sayHello' with params: {} with meta: { '$repl': true }
>> Execution time:3ms
>> Response:
'Hello Old MicroService'
mol $ call v2.hello.sayHello
>> Call 'v2.hello.sayHello' with params: {} with meta: { '$repl': true }
>> Execution time:927μs
>> Response:
'Hello New MicroService'
.......................................................................................................................................................................................
							  Return Type and serialization
.........................................................................................................................................................................................
Transporter needs a serializer module which serializes & deserializes the transferred packets. 
The default serializer is the JSONSerializer but there are several built-in serializer.

Types of Serializer:

1.JSON serializer
2.Avro serializer
3.MsgPack serializer
4.Notepack serializer
5.ProtoBuf serializer
6.Thrift serializer
7.CBOR serializer


//start:
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    serializer: "JSON" // not necessary to set, because it is the default
})

broker.createService({
    name: "products",
    actions: {
        //here we write biz logic
        findAll(ctx) {
            return ctx.call('inventory.findAll')
        }
    }
})
broker.createService({
    name: "inventory",
    actions: {
        findAll() {
            return [{
                id: 1,
                name: 'Iphone',
                qty: 100,
                price: 1000
            }]
        }
    }
})


async function main() {
    try {
        //start service broker: start webserver
        await broker.start()
        broker.repl()

    }
    catch (err) {
        console.log(err)
    }
}
main()
....................................................................................
			 Promises and Moleculer-Async Services
....................................................................................
//start:
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    serializer: "JSON" // not necessary to set, because it is the default
})

broker.createService({
    name: "products",
    actions: {
        //here we write biz logic
        async findAll(ctx) {
            return await ctx.call('inventory.findAll')
        }
    }
})
broker.createService({
    name: "inventory",
    actions: {
        findAll() {
            const products = [{
                id: 1,
                name: 'Iphone',
                qty: 100,
                price: 1000
            }]
            return new this.Promise((resolve, reject) => {
                setTimeout(resolve, 1000, products)
            })
        }
    }
})


async function main() {
    try {
        //start service broker: start webserver
        await broker.start()
        broker.repl()

    }
    catch (err) {
        console.log(err)
    }
}
main()
....................................................................................		
 configurations
.....................................................................................
settings: {
   routes: [
    {
       path:"/api"
    },
  ]
}

const { ServiceBroker } = require('moleculer')
const ApiGateway = require('moleculer-web')

const broker = new ServiceBroker()

//service
broker.createService({
    name: 'hello',
    actions: {
        sayHello: {
            handler(ctx) {
                return 'Hello'
            }
        }
    }
})

//apiGateway
broker.createService({
    name: 'ApiGateway',
    mixins: [ApiGateway],
    //webserver settings/configuration
    settings: {
        routes: [{
            path: '/api'
        },
        {
            path: '/admin'
        }
        ]
    }
})


async function main() {
    try {
        await broker.start()
        // broker.repl()
    }
    catch (err) {
        console.log(err)
    }
}
main()
....................................................................................				 configurations
.....................................................................................
settings: {
   routes: [
    {
       path:"/api"
    },
  ]
}

const { ServiceBroker } = require('moleculer')
const ApiGateway = require('moleculer-web')

const broker = new ServiceBroker()

//service
broker.createService({
    name: 'hello',
    actions: {
        sayHello: {
            handler(ctx) {
                return 'Hello'
            }
        }
    }
})

//apiGateway
broker.createService({
    name: 'ApiGateway',
    mixins: [ApiGateway],
    //webserver settings/configuration
    settings: {
        routes: [{
            path: '/api'
        },
        {
            path: '/admin'
        }
        ]
    }
})


async function main() {
    try {
        await broker.start()
        // broker.repl()
    }
    catch (err) {
        console.log(err)
    }
}
main()
....................................................................................
    		How to restrict service method/actions access outside
				whiteList - configuration
...................................................................................
const { ServiceBroker } = require('moleculer')
const ApiGateWay = require('moleculer-web')

const broker = new ServiceBroker({
    transporter: 'TCP',
    serializer: "JSON" // not necessary to set, because it is the default
});

broker.createService({
    name: 'greeter',
    actions: {
        sayHello() {
            return 'Hello!';
        },
        sayHai() {
            return 'Hai!';
        },
        sayGreet() {
            return 'Greet!';
        }
    }

})
// /GateWayService
broker.createService({
    name: 'ApiGateWay',
    mixins: [ApiGateWay],
    //override ApiGateWayService properties
    settings: {
        routes: [{
            path: '/api',
            whitelist: [
                //post.* //access any actions in 'posts' service
                
                "greeter.sayHello",
                "greeter.sayHai"
            ]
        }]
    }
})



async function main() {
    await broker.start();
}
main();
....................................................................................

			URL Mapping in moleculer
..................................................................................

http://localhost:3000/api/serviceName/actionName

  This is not good way to map urls , which more difficult to remember, it is not user friendly
it is not even secure,the reason, we expose the back end service to end users.

Aliases:
........
  You can use aliases(dummyname/fakename)-Virtual path, instead of action name.

 settings: {
        routes: [
            {
                path: "/api",
                aliases: { 
                    "hello" : "greeter.hello",
                    "users" :  "users.list"
                }             
            }
        ]

http://localhost:3000/api/hello
http://localhost:3000/api/users

const { ServiceBroker } = require('moleculer')
const ApiGateWay = require('moleculer-web')

const broker = new ServiceBroker({
    transporter: 'TCP',
    serializer: "JSON" // not necessary to set, because it is the default
});

// /GateWayService
broker.createService({
    name: 'ApiGateWay',
    mixins: [ApiGateWay],
    //override ApiGateWayService properties
    settings: {
        routes: [{
            path: '/api',
            aliases: {
                "hello": "greeter.sayHello",
                "hai": "greeter.sayHai",
                "greet": "greeter.sayGreet"
            }

        }, {
            path: '/admin'

        }]
    }
})

broker.createService({
    name: 'greeter',
    actions: {
        sayHello() {
            return 'Hello!';
        },
        sayHai() {
            return 'Hai!';
        },
        sayGreet() {
            return 'Greet!';
        }
    }

})



async function main() {
    await broker.start();
}
main();
........................

CURD operations:

const { ServiceBroker } = require('moleculer')
const ApiGateWay = require('moleculer-web')

const broker = new ServiceBroker()

broker.createService({
    name: 'products',
    actions: {
        list: {
            handler(ctx) {
                return "findAll Products"
            }
        },
        get: {
            handler(ctx) {
                return "get By Id"
            }
        },
        create: {
            handler(ctx) {
                return "Save"
            }
        },
        update: {
            handler(ctx) {
                return "update"
            }
        },
        remove: {
            handler(ctx) {
                return "remove"
            }
        }
    }
})

//start web server/container
broker.createService({
    name: 'ApiGateWay',
    mixins: [ApiGateWay],
    settings: {
        routes: [
            {
                path: '/api',
                aliases: {
                    "GET products": "products.list",
                    "GET products/:id": "products.get", //products/1 products/2 
                    "POST products": "products.create",
                    "PUT products/:id": "products.update",
                    "DELETE products/:id": "products.remove"

                }
            }
        ]
    }

})

async function main() {
    try {
        await broker.start()
        broker.repl()
    } catch (err) {
        console.log(err)
    }
}
main()

....................................................................................
			What if Resources are growing


Products
   aliases: {
                "GET products": "products.list",  //GET list is default method
                "GET products/:id": "products.get", //products/1 products/2 
                "POST products": "products.create",
                "PUT products/:id": "products.update",
                "DELETE products/:id": "products.remove"
            }

Customers
    aliases: {
                "GET customers": "customers.list",  //GET list is default method
                "GET customers/:id": "customers.get", //products/1 products/2 
                "POST customers": "customers.create",
                "PUT customers/:id": "customers.update",
                "DELETE customers/:id": "customers.remove"
            }

Can we simplify the above code?
 
Yes!
 Automation, automatic code generation.

Way 1;
 REST path: service

it will map actions automatically but there is rule , method names should be like below
 aliases: { 
   "REST users" : "users"
 }
 list
 get
 save
 update
 remove

const { ServiceBroker } = require("moleculer");
const ApiGateWayService = require("moleculer-web");

const broker = new ServiceBroker({
    serializer: "JSON"
})

const PRODUCTS = [{
    id: 1,
    name: 'A',
    price: 100,
    qty: 34

},
{
    id: 2,
    name: 'A1',
    price: 1002,
    qty: 342

}]
broker.createService({
    name: 'products',
    actions: {
        //GET ALL products
        list: {
            handler(ctx) {
                return PRODUCTS;
            }
        },
        //GET product by id
        get: {
            handler(ctx) {
                console.log(ctx.params)
                return PRODUCTS.filter(product => product.id == ctx.params.id)
            }
        },
        //save
        create(ctx) {
            console.log(ctx.params)
            return 'Product Created'
        },
        //update
        update(ctx) {
            return 'Product updated'
        },
        //delete
        remove(ctx) {
            return 'Product removed'
        }
    }
})
broker.createService({
    name: 'APIGateWay',
    mixins: [ApiGateWayService],
    settings: {
        routes: [{
            path: '/api',
            aliases: {
                "REST products": "products"
            }
        }]
    }
})

async function init() {
    try {
        await broker.start();
    }
    catch (e) {
        log(e);
    }
}
init();

method names:
 list
 get
 create
 update
 remove

....................................................................................
			Auto aliases: without mapping rest api 
.....................................................................................

Actions can be converted into rest api.

      list:{
	  // /api/users/
	   rest : "GET /"       
	   handler(ctx){

	   }
        }

      get:{
	  // /api/users/
	   rest : "GET /:id"       
	   handler(ctx){

	   }
        }

     save:{
	  // /api/users/
	   rest : "POST /"       
	   handler(ctx){

	   }
        }

const { ServiceBroker } = require("moleculer");
const ApiGateWayService = require("moleculer-web");

const broker = new ServiceBroker()

const PRODUCTS = [{
    id: 1,
    name: 'A',
    price: 100,
    qty: 34

},
{
    id: 2,
    name: 'A1',
    price: 1002,
    qty: 342

}]

broker.createService({
    name: 'products',
    actions: {
        //GET ALL products
        list: {
            rest: "GET /",
            handler(ctx) {
                return PRODUCTS;
            }
        },
        //GET product by id
        get: {
            rest: "GET /:id",
            handler(ctx) {
                console.log(ctx.params)
                return PRODUCTS.filter(product => product.id == ctx.params.id)
            }
        },
        //save
        create: {
            rest: "POST /",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product Created'
            }
        },
        //update
        update: {
            rest: "PUT /:id",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product update'
            }
        },
        //delete
        remove: {
            rest: "DELETE /:id",
            handler(ctx) {
                console.log(ctx.params)
                return 'Product update'
            }
        }
    }
})

broker.createService({
    name: 'APIGateWay',
    mixins: [ApiGateWayService],
    settings: {
        routes: [{
            path: '/api',
            aliases: {
               //custom end point configuration
            },
            autoAliases: true
        }]
    }
})
async function init() {
    try {
        await broker.start();
    }
    catch (e) {
        log(e);
    }
}
init();
....................................................................................
			    Logging
...................................................................................

Built in Logger: Console

const { ServiceBroker } = require('moleculer')

//create broker object
const broker = new ServiceBroker({
    logger: "File"
})
//create service
broker.createService({
    name: 'hello',
    //biz logic 
    actions: {
        //methods
        sayHello() {
            //log
            //console.log("say Hello is called")
            this.logger.info("Say Hello is called")
            return "Hello"
        }
    }
})


async function main() {
    try {
        await broker.start()
        console.log('Broker is ready')
        broker.repl()
    }
    catch (err) {
        console.log(err)
    }
}
main()

....................................................................................
			    Caching
...................................................................................

if api is called for data which calls internally database or external end points.

if api returns the same data again and again, why should i execute queries or calling third party api

Caching provides high level performance.

Without Caching:
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    logger: "Console"
})

broker.createService({
    name: 'user',
    actions: {
        list: {
            handler(ctx) {
                this.logger.info('handler is called')
                return [{
                    id: 1, name: 'Subramanian'
                },
                {
                    id: 2, name: 'Murugan'
                }]
            }
        }
    }
})

async function main() {
    try {
        await broker.start()
        broker.repl()
    }
    catch (err) {
        console.log(err)
    }
}
main()

output
>> Call 'user.list' with params: {} with meta: { '$repl': true }
[2024-07-20T06:14:47.170Z] INFO  desktop-kaufcr7-9376/USER: handler is called
>> Execution time:3ms
>> Response:
[ { id: 1, name: 'Subramanian' }, { id: 2, name: 'Murugan' } ]
mol $ call user.list
>> Call 'user.list' with params: {} with meta: { '$repl': true }
[2024-07-20T06:14:56.589Z] INFO  desktop-kaufcr7-9376/USER: handler is called
>> Execution time:1ms
>> Response:
[ { id: 1, name: 'Subramanian' }, { id: 2, name: 'Murugan' } ]
mol $ call user.list
>> Call 'user.list' with params: {} with meta: { '$repl': true }
[2024-07-20T06:14:59.203Z] INFO  desktop-kaufcr7-9376/USER: handler is called
>> Execution time:5ms
>> Response:
[ { id: 1, name: 'Subramanian' }, { id: 2, name: 'Murugan' } ]
mol $ call user.list
>> Call 'user.list' with params: {} with meta: { '$repl': true }
[2024-07-20T06:15:00.348Z] INFO  desktop-kaufcr7-9376/USER: handler is called
>> Execution time:5ms
>> Response:
[ { id: 1, name: 'Subramanian' }, { id: 2, name: 'Murugan' } ]

now you can notice, this method is called more number of times 

Types of caching:
..................

1.InMemory Caching
   once the app is restarted , then all cache data will be lost but stores all cached
data in "RAM".

const broker = new ServiceBroker({
    cacher: "Memory"
});
const broker = new ServiceBroker({
    cacher: true
});
const { ServiceBroker } = require('moleculer')

const broker = new ServiceBroker({
    logger: "Console",
    cacher: "Memory" //type of cache configuration
})
broker.createService({
    name: 'user',
    actions: {
        list: {
            //meta configurations
            cache: true,
            handler(ctx) {
                this.logger.info('user service is called')
                return [{
                    id: 1, name: 'Subramanian'
                },
                {
                    id: 2, name: 'Murugan'
                }]
            }
        }
    }
})
async function main() {
    try {
        await broker.start()
        broker.repl()
    }
    catch (err) {
        console.log(err)
    }
}
main()

Redis Cache:

1.you have to start redis server.

docker run --name some-redis -p 6379:6379  redis

2.install redis driver.
 npm install ioredis

3.redis configuration
const broker = new ServiceBroker({
    logger: "Console",
    cacher: "redis://localhost:6379"
})

Code:
const { ServiceBroker } = require('moleculer')

// const broker = new ServiceBroker({
//     logger: "Console",
//     cacher: "Memory"
// })

const broker = new ServiceBroker({
    logger: "Console",
    cacher: "redis://localhost:6379"
})


broker.createService({
    name: 'user',
    actions: {
        list: {
            //list method now is cached
            cache: true,
            handler(ctx) {
                this.logger.info('handler is called')
                return [{
                    id: 1, name: 'Subramanian'
                },
                {
                    id: 2, name: 'Murugan'
                }]
            }
        }
    }
})

async function main() {
    try {
        await broker.start()
        broker.repl()
    }
    catch (err) {
        console.log(err)
    }
}
main()

Testing:

mol $ call user.list
>> Call 'user.list' with params: {} with meta: { '$repl': true }
[2024-07-20T06:34:25.583Z] INFO  desktop-kaufcr7-12256/USER: handler is called
>> Execution time:7ms
>> Response:
[ { id: 1, name: 'Subramanian' }, { id: 2, name: 'Murugan' } ]
mol $ call user.list
>> Call 'user.list' with params: {} with meta: { '$repl': true }
>> Execution time:4ms
>> Response:
[ { id: 1, name: 'Subramanian' }, { id: 2, name: 'Murugan' } ]
mol $

Verify against Redis Server

redis-cli
127.0.0.1:6379> keys *
1) "MOL-user.list:"
127.0.0.1:6379> GET MOL-user.list: 
"[{\"id\":1,\"name\":\"Subramanian\"},{\"id\":2,\"name\":\"Murugan\"}]"
127.0.0.1:6379> 

......................................................................................				
                                  Database connectivity -Mongodb
.....................................................................................

npm install moleculer-db moleculer-db-adapter-mongoose mongoose@6.5.4 --save
  
  "dependencies": {
    "moleculer": "^0.14.33",
    "moleculer-db": "^0.8.25",
    "moleculer-db-adapter-mongoose": "^0.9.4",
    "moleculer-web": "^0.10.7",
    "mongoose": "^6.5.4"
  },
  "devDependencies": {
    "moleculer-repl": "^0.7.4"
  }
}

const { ServiceBroker } = require("moleculer");
const DbService = require("moleculer-db");
const MongooseAdapter = require("moleculer-db-adapter-mongoose");
const mongoose = require("mongoose");
const ApiGateWayService = require('moleculer-web')

const broker = new ServiceBroker();

const DATABASE_URL = "mongodb+srv://subugee:subugee222@cluster0.shfpbhv.mongodb.net/myFirstDatabase?retryWrites=true&w=majority&appName=Cluster0"

// Create a Mongoose service for `post` entities
broker.createService({
    name: "postsdb",
    mixins: [DbService],

    adapter: new MongooseAdapter(DATABASE_URL),
    model: mongoose.model("Post", mongoose.Schema({
        title: { type: String },
        content: { type: String },
        votes: { type: Number, default: 0 }
    }))
});

broker.createService({
    name: 'posts',
    actions: {
        //GET ALL products
        list: {
            rest: "GET /",
            async handler(ctx) {
                //return ctx.
                const posts = await ctx.call('postsdb.find')
                return posts
            }
        },

        //save
        create: {
            rest: "POST /",
            async handler(ctx) {
                const { title, content, votes } = ctx.params
                const res = await ctx.call("postsdb.create", {
                    title: title,
                    content: content,
                    votes: votes
                })
                console.log(res)
                return 'post Created'
            }
        },
        //start adding other options

    }
})


broker.createService({
    name: 'APIGateWay',
    mixins: [ApiGateWayService],
    settings: {
        routes: [{
            path: '/api',
            aliases: {
                "REST posts": "posts"
            }
        }]
    }
})


async function init() {
    try {
        await broker.start();
        broker.repl()
    }
    catch (e) {
        log(e);
    }
}
init();
...........................................................................................................................................................................................
	.....................................................................................
					High Availability and scalibity
..............................................................................................
			   	
 				  Load Balancing

In Server-side load balancing, the instances of the service are deployed on multiple servers and then a load balancer is put in front of them. It is generally a hardware load balancer. All the incoming requests traffic firstly comes to this load balancer acting as a middle component. It then decides to which server a particular request must be directed to based on some algorithm.

Disadvantages of Server-side load balancing:

Server side load balancer acts as a single point of failure as if it fails, all the instances of the microservice becomes inaccessible as only load balancer has the list of servers.

Since each microservice will have a separate load balancer, the overall complexity of the system increases and it becomes hard to manage.

The network latency increases as the number of hops for the request increases from one to two with the load balancer, one to the load balancer and then another from load balancer to the microservice.


2. Client-side Load Balancing

The instances of the service are deployed on multiple servers. Load balancer's logic is part of the client itself, it holds the list of servers and decides to which server a particular request must be directed to based on some algorithm. These client side load balancers are also known as software load balancers.

Disadvantages of Client-side load balancing
The load balancer's logic is mixed up with the microservice code.


............................

Server side Load balancer is very usefull to manage trafic from outside applications.
Mobile clients and webclients trafic easily can be managed.

Client side load balancers are very usefull to mangae trafic inside microservice application.


Why we need load balancer?

1. To scale services instances
 A single service may not sufficient to handle multiple concurrent request.

How to select which service instance to be assigned to caller(client), 

   With help of Load Balancer.

Load Balancer balances incomming load and route according to "router algorthims" provided by load balancers.


Built-in strategies

 ->RoundRobin strategy
	This strategy selects a node based on round-robin algorithm.
   Refer:https://en.wikipedia.org/wiki/Round-robin_DNS
 ->Random strategy
	This strategy selects a node randomly.
 ->CPU usage-based strategy
	This strategy selects a node which has the lowest CPU usage. Due to the node list can 	be very long, it gets samples and selects the node with the lowest CPU usage from only 	samples instead of the whole node list.

 ->Latency-based strategy
	This strategy selects a node which has the lowest latency, measured by periodic ping commands. Notice that the strategy only ping one of nodes from a single host.

In Moleculer load balancers are built in, part of Registry , which is part of broker.

Moleculer loader balancer by default uses RoundRobin algorthim, if you want to change different one, you can override

 registry: {
        strategy: "Latency",
        strategyOptions: {
            sampleCount: 15,
            lowLatency: 20,
            collectCount: 10,
            pingInterval: 15
        }
    }

In Moleculer load balancers are built in, part of Registry , which is part of broker.

Moleculer loader balancer by default uses RoundRobin algorthim, if you want to change different one, you can override

 registry: {
        strategy: "Latency",
        strategyOptions: {
            sampleCount: 15,
            lowLatency: 20,
            collectCount: 10,
            pingInterval: 15
        }
    }

How to implement load balancing?

1.You need to clone the services n- number of times.
  lets say i have service called "adder" service , i need to run adder service 2 instances

2.Each service is going to run in different nodes. Each node must be identified quickly.
  Node name should not be hardcoded.
  In Genernal Node Id would be  - computername_processId

How to test ?

Open 3 cmd 
PS G:\IBM\2024\May\Nodejs\microservices\loadbalancing\add-service> node services/add.service.js

PS G:\IBM\2024\May\Nodejs\microservices\loadbalancing\add-service> node services/add.service.js
PS G:\IBM\2024\May\Nodejs\microservices\loadbalancing\add-service> node services/add.service.js



How to implement load balancing?

1.You need to clone the services n- number of times.
  lets say i have service called "adder" service , i need to run adder service 2 instances

2.Each service is going to run in different nodes. Each node must be identified quickly.
  Node name should not be hardcoded.
  In Genernal Node Id would be  - computername_processId

..................................................................................
		     Fault tolerance  Design pattern
..................................................................................

In Microservices, services are talking each other, while talking there are possibility.

A. Callee Service may slow than expected duration by caller. - Slow calls

B. Callee may throw error , then caller gets exception which will be propagated across the app
   which may stop the entire app.

How to deal / solve the problem of above one ?

   Via Reliability pattern, we can solve the Problem.

Moleculer Provides Fault tolerance , through which we can solve
 

-Timeout

    Service-X  is calling Service-Y

1.You may get Result(succees/errors) "on time".

2.YOu may not get any thing beyond time.

3.Timeout defines deadlines for services


eg:
   Service-X expects result in 500 ms from Service-Y, What if Service-Y not able to give result within that time line , Service-Y will throw TimeoutException.

Now you need to decide how to Handle TimeoutException?

 -throw exception and handle it
 -You can have alternate fallback api to return result to the caller.


Any fault tolerance algorithm in Moleculer can be configured in two places

1.At broker level
const broker = new ServiceBroker({
    requestTimeout: 5 * 1000 // in milliseconds
});

2.At service level

broker.call("posts.find", {}, { timeout: 3000 });


services/timeoutmain.service.js


const { ServiceBroker } = require('moleculer');

const broker = new ServiceBroker({
    transporter: "TCP",
    requestTimeout: 5 * 1000 // in milliseconds

});
broker.createService({
    name: 'main',
    actions: {

        begin: {
            // Call the 'getCachedResult' method when error occurred
            fallback: "getCachedResult",
            async handler(ctx) {
                const { a, b, timeout } = ctx.params
                let res = await ctx.call('remotetimeout.calculate', { a, b }, {
                    timeout: timeout
                })
                console.log(`Result Got From Remote Services ${res}`)
            }
        }

    },
    methods: {
        getCachedResult() {
            return `From the Cache 0`
        }
    }
})
async function init() {
    await broker.start()
    broker.repl()
}
init();

services/remotetimeout.service.js
const { ServiceBroker } = require('moleculer');

const broker = new ServiceBroker({
    transporter: "TCP",
    requestTimeout: 5 * 1000 // in milliseconds
});

broker.createService({
    name: 'remotetimeout',
    actions: {
        async calculate(ctx) {
            const { a, b } = ctx.params
            return new Promise((resolve, reject) => {
                setTimeout(resolve, 3000, `${a + b} - ${broker.nodeID} `)
            })
        }
    }
})

async function init() {
    await broker.start()
    broker.repl()
}
init();

call main.begin --a 10 --b 20 --timeout 5000
>> Call 'main.begin' with params: { a: 10, b: 20, timeout: 5000 } with meta: { '$repl': true } with options: {}
Result Got From Remote Services 30 - laptop-r2tggfdl-13828

call main.begin --a 10 --b 20 --timeout 2000
>> Call 'main.begin' with params: { a: 10, b: 20, timeout: 2000 } with meta: { '$repl': true } with options: {}
[2022-05-27T09:43:13.543Z] WARN  laptop-r2tggfdl-13612/BROKER: Request 'remotetimeout.calculate' is timed out. { requestID: '6e3a1abe-432d-41eb-9311-ee9026e207e5', nodeID: 'laptop-r2tggfdl-13828', timeout: 2000 }
[2022-05-27T09:43:13.544Z] WARN  laptop-r2tggfdl-13612/MAIN: The 'main.begin' request is failed. Return fallback response. { requestID: '6e3a1abe-432d-41eb-9311-ee9026e207e5', err: "Request is timed out when call 'remotetimeout.calculate' action on 'laptop-r2tggfdl-13828' node." }
>> Execution time:2s
>> Response:
'From the Cache 0'

			Moleculer cli and Moleculer Runner
....................................................................................

Moleculer Runner
 Moleculer Runner is a helper script that helps you run Moleculer projects. With it, you don’t need to create a ServiceBroker instance with options. Instead, you can create a moleculer.config.js file in the root of repo with broker options. Then simply call the moleculer-runner in NPM script, and it will automatically load the configuration file, create the broker and load the services. Alternatively, you can declare your configuration as environment variables.

Moleculer cli
 Provides features
1.create projects
2.mananage project life cycles
3.which embeded moleculer runner.

npm i -g moleculer-cli






							














