				Node Platform apis
.....................................................................................
Node Modules - common js:

Types of modules:

1.Custom module
  built by us
2.built in modules
   provided by node.js  
3.provided by third party/community
  libs, frameworks

Built in Modules:
.................
File System io
Networking
os
etc...
https://nodejs.org/docs/latest/api/os.html

..................................................................................
			1.os 

The os module provides operating system-related utility methods and properties. It can be accessed using:
const os = require('os')

console.log(os.arch())
console.log(os.cpus())
console.log(os.freemem())
console.log(os.hostname())
console.log(os.totalmem())
....................................................................................
./ vs ''
.........

 require('./services/TODOService');
  ->here you can see ./
  ./ -current dir

 require('node:os'); => 
  -here no ./ 

Why?

Note : if you are java dev, you know the class path , how it works?


require('node:os');

Node internally uses a search algorithm, node always looks the folder called
 "node_modules" in the current project, if not , then it searches, the node in built 
installation folder---c:/pf/node/node_modules--if it finds it will pick up from there else it will throw error.

require('./services/TODOService');
   it will lookup in the current dir or sub dirs only.

internal/modules/cjs/loader.js:800
    throw err;
    ^

Error: Cannot find module 'osxx'
Require stack:
- C:\session\ibm\feb\nodems\mynodeapps\src\index.js
[90m    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:797:15)[39m
[90m    at Function.Module._load (internal/modules/cjs/loader.js:690:27)[39m
[90m    at Module.require (internal/modules/cjs/loader.js:852:19)[39m
[90m    at require (internal/modules/cjs/helpers.js:74:18)[39m
    at Object.<anonymous> (C:\session\ibm\feb\nodems\mynodeapps\src\index.js:1:32)
[90m    at Module._compile (internal/modules/cjs/loader.js:959:30)[39m
[90m    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)[39m
[90m    at Module.load (internal/modules/cjs/loader.js:815:32)[39m
[90m    at Function.Module._load (internal/modules/cjs/loader.js:727:14)[39m
[90m    at Function.Module.runMain (internal/modules/cjs/loader.js:1047:10)[39m {
  code: [32m'MODULE_NOT_FOUND'[39m,
  requireStack: [ [32m'C:\\session\\ibm\\feb\\nodems\\mynodeapps\\src\\index.js'[39m ]
}
.....................................................................................
			  Events

Node.js is event driven arch, some program emits events called emitter and some program listens for those events called "listeners".

Using events module we can build event programming model.

As of now , we are going to discuss simple events with in objects, later in microservices we will see the distributed event driven arch.

Much of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called "emitters") emit named events that cause Function objects ("listeners") to be called.

For instance: a net.Server object emits an event each time a peer connects to it; a fs.ReadStream emits an event when the file is opened; a stream emits an event whenever data is available to be read.

const EventEmitter = require('events')

class Sales extends EventEmitter {
    constructor() {
        super()
        //event registeration
        this.on('sales', (evt) => {
            console.log(evt)
        })
    }
    sale(product) {
     //emit event
      this.emit('sales',product)
    }
}
function main() {
    let sales = new Sales()
    sales.sale({ id: 1, name: 'Phone', qty: 10, price: 10000 })
}
main()









